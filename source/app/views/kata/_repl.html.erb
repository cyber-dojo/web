<div id="repl-terminal"></div>

<script>
'use strict';
$(() => {

  const repl = cd.kata.repl;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // [1] The repl and web-socket Urls have a random suffix.
  // If the repl docker container's id was based *only* on the kata-id,
  // then creating a new repl could fail if a recently closed repl
  // had caused a repl DELETE request, but the docker daemon had not
  // yet actually deleted the repl container.
  // P.S. In an early iteration I tried to put a Terminal inside a
  // jQuery dialog. I failed. Some gnarly CSS z-Index issues I think.

  repl.close = () => {};

  repl.open = () => {
    const element = document.getElementById('repl-terminal');
    const terminal = createTerminalIn(element);
    const sid = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0,6);
    const route = `${location.hostname}/repler/${cd.kata.id}-${sid}`; // [1]
    const repler = new Repler(`http://${route}`, terminal);
    const socket = new WebSocketMonitor(`ws://${route}`, terminal);
    cd.saveCodeFromSyntaxHighlightEditors();
    repler.create().then(() => socket.open());
    repl.close = () => {
      repl.close = () => {};
      repler.delete().then(() => socket.close());
      $(element).empty().hide(); // Ready for next time.
    };
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  function WebSocketMonitor(url, terminal) {
    this.url = url;
    this.terminal = terminal;
  };

  WebSocketMonitor.prototype.open = function() {
    const that = this;
    this.socket = new WebSocket(this.url);
    this.socket.onopen = function(_event) {
      that.terminal.greenWriteln('Opening WebSocket');
      that.terminal.attach(that.socket);
      that.terminal._initialize = true;
    };
    this.socket.onclose = function(event) {
      const NGINX_TIMEOUT_CODE = 1006;
      if (event.code === NGINX_TIMEOUT_CODE) {
        that.terminal.greenWriteLn('WebSocket timed out');
        that.start(); // silently restart
      }
    };
    this.socket.onerror = function(event) {
      this.terminal.greenWriteln('WebSocket error');
    };
  };

  WebSocketMonitor.prototype.close = function() {
    this.terminal.greenWriteln('Closing WebSocket');
    this.terminal.detach(this.socket);
    this.socket.close(1000, 'User closed the WebSocket');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const createTerminalIn = (element) => {
    // https://xtermjs.org/docs/api/terminal/interfaces/itheme/
    const terminal = new Terminal({
      theme: { background:'white', foreground:'black',cursor:'black' },
      cursorBlink: true,
      scrollback: 10,
      tabStopWidth: 10
    });
    const addOns = [attach,fit,fullscreen,search,winptyCompat];
    addOns.forEach(addOn => Terminal.applyAddon(addOn));
    $(element).css({background:'white'}).show();
    terminal.open(element);
    terminal.winptyCompatInit();
    terminal.fit();
    terminal.focus();
    terminal.greenWriteln = (s) => {
      const greenCode = '\u001b[32m';
      const resetCode = '\u001b[0m';
      terminal.writeln(`${greenCode}${s}${resetCode}`);
      console.log(s);
    };
    return terminal;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  function Repler(url, terminal) {
    this.url = url;
    this.terminal = terminal;
  };

  Repler.prototype.create = function() {
    this.terminal.greenWriteln('Creating REPL');
    return fetch(this.url, {
      method: 'POST',
      body: JSON.stringify($('form').serializeArray()),
      headers: { 'content-type': 'application/json' }
    });
  };

  Repler.prototype.delete = function() {
    this.terminal.greenWriteln('Deleting REPL');
    return fetch(this.url, { method: 'DELETE' });
  };

});
</script>
