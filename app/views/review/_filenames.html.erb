<div id="diff-filenames"></div>

<script>
'use strict';
$(() => {

  const review = cd.review;

  review.refreshFilenames = (diffs) => {
    const $diffFilenames = $('#diff-filenames');
    $diffFilenames.html($makeDiffFilenames(diffs));
    resetFilenameAddedDeletedLineCountHandlers();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeDiffFilenames = (diffs) => {
    const $table = $('<table>', { class:'filenames' });
    $table.append($makeIconHeadings());
    sortedDiffs(diffs).forEach(diff => $table.append($makeDiffTr(diff)));
    return $table;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeIconHeadings = () => {
    const $tr = $('<tr>');
    if (review.diffCheckBox.isChecked()) {
      $tr.append(
        $makeDiffLineCountIconTd('deleted', '&mdash;'),
        $makeDiffLineCountIconTd('added', '+'),
        $makeDiffLineCountIconTd('same', '='),
        $makeTd('') // Aligns withs type-td
      )
    }
    $tr.append($makeTd('')); // Aligns with filename-td
    return $tr;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeDiffTr = (diff) => {
    const $tr = $('<tr>');
    if (review.diffCheckBox.isChecked()) {
      $tr.append(
        $makeDiffCountTd(diff, 'deleted'),
        $makeDiffCountTd(diff, 'added'),
        $makeDiffCountTd(diff, 'same'),
        $makeDiffTypeTd(diff)
      );
    }
    $tr.append($makeTd(review.makeDiffFilename(diff)));
    return $tr;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeDiffLineCountIconTd = (cssName, icon) => {
    const $icon = $('<div>', {
      class:`diff-line-count-icon ${cssName}`
    }).html(icon);
    return $('<td>').append($icon);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeDiffCountTd = (diff, cssName) => {
    const lineCount = diff.line_counts[cssName];
    const css = lineCount > 0 ? cssName : '';
    const $div = $('<div>', {
      class: `diff-line-count ${css}`,
      'data-diff-id': diff.id
    });
    $div.html(lineCount > 0 ? lineCount : '&nbsp;');
    return $('<td>').append($div);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeDiffTypeTd = (diff) => {
    if (diff === '&nbsp;') { return diff; }
    const $div = $('<div>', { class:`diff-type-marker ${diff.type}` });
    let tip = '';
    if (diff.type === 'renamed') {
      tip += oldFilenameTip(diff);
    }
    if (diff.chunkCount > 0) {
      if (tip != '') { tip += '<br/>'; }
      tip += chunkCountTip(diff);
    }
    if (tip != '') {
      cd.createTip($div, tip);
    }
    return $('<td>').append($div);
  };

  const oldFilenameTip = (diff) => {
    const filename = cd.htmlEscape(diff.old_filename);
    return `was<span class="diff-filename renamed">${filename}</span>`;
  };

  const chunkCountTip = (diff) => {
    return `diff chunk count == ${diff.chunkCount}`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.makeDiffFilename = (diff) => {
    return $('<div>', {
      class: `diff-filename ${diff.type}`,
         id: `diff-filename-${diff.id}`,
      'data-diff-id': diff.id
    }).html(diff.filename)
      .click(() => review.selectFilename(diff));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const sortedDiffs = (diffs) => {
    // Ensure filenames appear in the same order as kata/edit page
    const filenames = diffs.map(diff => diff.filename);
    const sorted = cd.sortedFilenames(filenames);
    const diffFor = (filename) => diffs.find(diff => diff.filename === filename);
    return sorted.map(filename => diffFor(filename));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const resetFilenameAddedDeletedLineCountHandlers = () => {

    const display = (node, type, value) => {
      const $node = $(node);
      // Only [+][-] counts for current filename are live
      if ($node.html() === '&nbsp;') { return; }
      if ($node.attr('disabled') !== 'disabled') {
        const id = $node.data('diff-id');
        const selector = `#file-content-${id} ${type}`;
        $(selector).css('display', value);
        if (value === 'none') {
          $node.removeClass('on').addClass('off');
        } else {
          $node.removeClass('off').addClass('on');
        }
      }
    };

    [ 'deleted', 'added' ].forEach(type => { // not 'same'
      $(`.diff-line-count.${type}`)
        .clickToggle(
          function() { display(this, type, 'none' ); },
          function() { display(this, type, 'block'); }
        );
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.selectFilename = (diff) => {
    // show filename
    $('.diff-filename', review.page).removeClass('selected');
    $(`#diff-filename-${diff.id}`, review.page).addClass('selected');
    // show diff line-counts
    $('.diff-line-count').attr('disabled', true);
    $(`.diff-line-count[data-diff-id="${diff.id}"]`).attr('disabled', false);
    // show file content
    $('.file-content', review.page).hide();
    $(`#file-content-${diff.id}`, review.page).show();

    scrollToNextDiffChunkOnReclick(diff);
    review.filename = diff.filename;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const scrollToNextDiffChunkOnReclick = (diff) => {
    const hasDiffChunks = () => diff.chunkCount > 0;
    const isFirstClick = () => !diff.hasBeenClicked;
    const isReClick = () => review.filename === diff.filename;
    if (hasDiffChunks() && (isFirstClick() || isReClick())) {
      const $diffSheet = $(`#diff-sheet-${diff.id}`);
      const $diffChunk = $(`#diff-chunk-${diff.id}-${diff.chunkIndex}`);
      const position = { scrollTop: '+=' + ($diffChunk.offset().top - 250) + 'px' };
      const halfSecond = 500;
      $diffSheet.animate(position, halfSecond);
      diff.chunkIndex += 1;
      diff.chunkIndex %= diff.chunkCount;
    }
    diff.hasBeenClicked = true;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeTd = ($node) => $('<td>').html($node);

});
</script>
