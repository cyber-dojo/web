<span id="avatar-navigator" style="display:none;">
  <button id="prev-avatar" class="triangle button">
    <img src="/images/triangle_prev.gif"
         alt="move to previous avatar"/>
  </button>
  <div id="review-avatar-image-box"></div>
  <button id="next-avatar" class="triangle button">
    <img src="/images/triangle_next.gif"
         alt="move to next avatar"/>
  </button>
</span>

<script>
'use strict';
$(() => {

  const review = cd.review;

  const $avatarNavigator = $('#avatar-navigator');

  review.avatarNavigator = {
       hide: () => $avatarNavigator.hide(),
    refresh: (kataId) => {
      review.getJSON('model', 'group_joined', {id:kataId}, (joined) => {
        avatarNavigatorRefresher(kataId, joined);
      });
    }
  };

  const avatarNavigatorRefresher = (kataId, joined) => {
    const [prevIndex,avatarIndex,nextIndex] = review.avatarsNeighbours(kataId, joined);
    // Make avatarIndex available for traffic-light hover-tip.
    review.avatarIndex = () => avatarIndex; // eg 23/''
    if (avatarIndex != '') {
      const $avatar = $('#review-avatar-image-box');
      refreshAvatar($('#prev-avatar'), joined, prevIndex);
      refreshAvatar($('#next-avatar'), joined, nextIndex);
      const $img = cd.lib.$makeAvatarImage(avatarIndex);
      cd.createTip($img, 'open avatar selector');
      $avatar.html($img)
             .off('click')
             .on('click', () => openAvatarSelectorDialog($avatar, kataId));
      $avatarNavigator.show();
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const refreshAvatar = (button, joined, index) => {
    button
      .attr('disabled', index === '')
      .off('click')
      .on('click', () => moveToAvatar(joined[index]));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const openAvatarSelectorDialog = ($from, kataId) => {
    const xPos = $from.offset().left;
    const yPos = $from.offset().top + 40;
    review.getJSON('model', 'group_joined', {id:kataId}, (joined) => {
      const $selector = $('<div>');
      $selector.html($makeAvatarSelectorHtml($selector, joined))
               .dialog({
                width: 370,
               height: 420,
             autoOpen: true,
        closeOnEscape: true,
                modal: true, // [X]
             position: [ xPos,yPos ],
                title: cd.dialogTitle('select avatar'),
                close: () => $selector.dialog('destroy')
      });
    });
    // [X] I tried modal:false but it doesn't work UX wise
    // as 8x8 takes up too much space.
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeAvatarSelectorHtml = ($selector, joined) => {
    const active = cd.review.avatarsActive(joined);
    const $table = $('<table>');
    times(8, (x) => {
      const $tr = $('<tr>');
      times(8, (y) => {
        const $td = $('<td>');
        const index = x*8 + y;
        const $img = active[index]
          ? $makeColourAvatar(index, joined[index], $selector)
          : $makeGreyAvatar(index);
        $td.append($img);
        $tr.append($td);
      });
      $table.append($tr);
    });
    return $table;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeGreyAvatar = (index) => {
    return $('<img>', {
        src: `/images/avatars/${index}.jpg`,
      class: 'small grey avatar',
        alt: `small grey avatar ${index}`
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const $makeColourAvatar = (index, avatar, $selector) => {
    const $img = $('<img>', {
        src: `/images/avatars/${index}.jpg`,
      class: 'small colour avatar',
        alt: `small colour avatar ${index}`
    });
    cd.setupAvatarNameHoverTip($img, '', index, '');
    $img.click(() => {
      cd.removeTip();
      $selector.dialog('close');
      moveToAvatar(avatar);
    });
    return $img;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const times = (n, f) => {
    for (let i = 0; i < n; i++) {
      f(i);
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const moveToAvatar = (avatar) => {
    const index = review.inDiffMode() ? 1 : avatar.events.length - 1;
    review.refresh(avatar.id, index);
  };

});
</script>
