<div id="review-traffic-lights"></div>

<script>
'use strict';
$(() => {

  const $trafficLights = $('#review-traffic-lights');

  cd.review.trafficLights = {
    refresh: (kataId, index) => {
      cd.review.getJSON('model', 'kata_events', {id:kataId}, (events) => {
        if (index === -1) {
          index = events.length - 1;
        }
        cd.review.index = () => index; // Need by [fork] and [checkout]
        trafficLightsRefresher(kataId, index, events);
        cd.review.refreshTrafficLightsNavigator(kataId, index, events);
      });
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const trafficLightsRefresher = (kataId, index, events) => {
    $trafficLights.empty();
    appendTrafficLights(kataId, index, events);
    scrollCurrentTrafficLightIntoView();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const appendTrafficLights = (kataId, index, events) => {
    cd.review.checkoutButton.enable();
    events.forEach(event => {
      if (cd.lib.isVisible(event)) {
        cd.lib.appendImageIfPrediction($trafficLights, event);
        cd.lib.appendImageIfRevert($trafficLights, event);
        cd.lib.appendImageIfCheckout($trafficLights, event);
        appendTrafficLight(kataId, index, event);
        if (isOwnRevertedIncorrectPredictionLight(event, index)) {
          cd.review.checkoutButton.disable();
        }
      }
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const appendTrafficLight = (kataId, index, light) => {
    const colour = light.colour;
    const $lightBox = $('<div class="light box">');
    const $light = $('<img>', {
      class: 'diff-traffic-light',
        src: `/images/traffic-light/${colour}.png`,
        alt: `${colour} traffic-light`
    });
    $light.click(() => cd.review.refresh(kataId, light.index));
    const wasIndex = light.index - 1;
    const nowIndex = light.index;
    cd.setupTrafficLightTip($light, light, kataId, wasIndex, nowIndex);
    $lightBox.append($light);
    if (index === light.index) {
      $lightBox.append(makeTrafficLightMarkerHtml(light));
    }
    $trafficLights.append($lightBox);
    return nowIndex;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const isOwnRevertedIncorrectPredictionLight = (light, index) => {
    const isCurrentIndex = (light.index === index);
    const predictedWrong = (light.colour != light.predicted);
    const wasReverted = (light.revert_if_wrong === 'on');
    const reviewingOwnLight = (cd.kata.id() === cd.review.id());

    return isCurrentIndex
      && cd.lib.isPredict(light)
        && predictedWrong
          && wasReverted
            && !cd.review.isIndependent()
              && reviewingOwnLight;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTrafficLightMarkerHtml = (light) => {
    return `<img id='traffic-light-marker'
                 src='/images/traffic-light/marker_${light.colour}.png'/>`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const scrollCurrentTrafficLightIntoView = () => {
    // refreshTrafficLights() has updated the dom with a $('#traffic-light-marker')
    // I cannot find a nice way to access it once the dom is ready. So this :-(
    const quarterSecond = 250;
    const scroller = () => {
      $('#traffic-light-marker').scrollIntoView({
        direction: 'horizontal',
         duration: 'slow'
      });
    };
    setTimeout(scroller, quarterSecond);
  };

});
</script>
