<div id="review-traffic-lights"></div>

<script>
'use strict';
$(() => {

  const review = cd.review;

  const $lights = $('#review-traffic-lights');

  review.trafficLights = {
    refresh: () => {
      review.getJSON('model', 'kata_events', {id:review.id}, (events) => {
        if (review.index === -1) {
          review.index = events.length - 1; // Need by [fork] and [checkout]
        }
        $lights.empty();
        appendTrafficLights(events);
        scrollCurrentTrafficLightIntoView();
        review.refreshTrafficLightsNavigator(events);
      });
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const appendTrafficLights = (events) => {
    review.checkoutButton.enable();
    review.trafficLightsCounts.reset();
    review.predictCounts.reset();
    events.forEach(event => {
      if (cd.lib.isVisible(event)) {
        const light = event;
        const isCurrentIndex = (review.index === light.index);
        const $light = cd.lib.appendTrafficLight($lights, light, {isCurrentIndex:isCurrentIndex});
        $light.click(() => review.refresh(review.id, light.index));
        cd.setupTrafficLightTip($light, light, review.id, light.index-1, light.index);
        cd.review.trafficLightsCounts.update(light);
        cd.review.predictCounts.update(light);
        if (isOwnRevertedIncorrectPredictionLight(light)) {
          review.checkoutButton.disable();
        }
      }
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const isOwnRevertedIncorrectPredictionLight = (light) => {
    const isCurrentIndex    = (review.index === light.index);
    const predictedWrong    = (light.colour != light.predicted);
    const wasReverted       = (light.revert_if_wrong === 'on');
    const reviewingOwnLight = (cd.kata.id === review.id);
    return isCurrentIndex
      && cd.lib.hasPrediction(light)
        && predictedWrong
          && wasReverted
            && !review.isIndependent()
              && reviewingOwnLight;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const scrollCurrentTrafficLightIntoView = () => {
    // refreshTrafficLights() has updated the dom with a $('#traffic-light-marker')
    // I cannot find a nice way to access it once the dom is ready. So this :-(
    const quarterSecond = 250;
    const scroller = () => {
      $('#traffic-light-marker').scrollIntoView({
        direction: 'horizontal',
         duration: 'slow'
      });
    };
    setTimeout(scroller, quarterSecond);
  };

});
</script>
