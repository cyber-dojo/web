<script>
'use strict';
$(() => {

  cd.review.groupNeighbours = (id, joined) => {
    if (isEmpty(joined)) {
      return ['','',''];
    }

    // eg id = "Q55b8b"
    // eg joined = {
    //      ...
    //      "23": { id:"Q55b8b", events:[0,1,2,3]     }, // 23 == jellyfish (==id)
    //      "15": { id:"EEJSkR", events:[0,1,2]       }, // 15 == fox
    //       "2": { id:"w34rd5", events:[0]           }, //  2 == bat
    //      "44": { id:"REf1t7", events:[0,1,2,3,4,5] }, // 44 == rhino
    //      ...
    //   }

    const active =
      Object.keys(joined)
            .filter((key) => joined[key].events.length > 1)
            .map((key) => ({ avatar:parseInt(key), id:joined[key].id }))
            .sort((lhs,rhs) => lhs.avatar - rhs.avatar);

    // eg active = [
    //      ...
    //      { avatar:15, id:"EEJSkR" }, // prevIndex == 15
    //      { avatar:23, id:"Q55b8b" }, // index == 5
    //      { avatar:44, id:"REf1t7" }, // nextIndex == 44
    //      ...
    //  ]

    const index = active.findIndex((e) => e.id === id);

    const prevAvatar = inRange(active, index-1);  // eg 15
    const     avatar = inRange(active, index);    // eg 23
    const nextAvatar = inRange(active, index+1);  // eg 44

    return [ prevAvatar, avatar, nextAvatar ];
  };

  const isEmpty = (o) => Object.keys(o).length === 0;

  const inRange = (active, index) => {
    if (index >= 0 && index < active.length) {
      return active[index].avatar;
    } else {
      return '';
    }
  };

});
</script>
