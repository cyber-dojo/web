<img id="settings-button" src="/images/settings.png" />

<div id="settings-dialog" style="display:none;">
  <div class="info">
    <div class="info-title">colour syntax</div>
    <input type="radio" id="colour-off" name="colour" value="off">
    <label for="colour-off">off</label><br/>
    <input type="radio" id="colour-on"  name="colour" value="on" >
    <label for="colour-on">on</label><br/>
  </div>
  <div class="info">
    <div class="info-title">theme</div>
    <input type="radio" id="dark"  name="theme" value="dark" >
    <label for="dark">dark</label><br/>
    <input type="radio" id="light" name="theme" value="light">
    <label for="light">light</label><br/>
  </div>
</div>

<script>
'use strict';
$(() => {

  cd.settings = {
    // Note: the CodeMirror theme is a combination of colour+theme
    colour:(value) => {
      const name = 'colour';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
        cd.codeMirror.resetTheme();
      }
    },
    theme:(value) => {
      const name = 'theme';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
        cd.codeMirror.resetTheme();
        cd.kata.tabs.theme(value);
      }
    },
    predict:(value) => {
      const name = 'predict';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
      }
    },
    revert:(value) => {
      const name = 'revert';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const cache = {};

  const getOption = (name) => {
    if (cache[name] === undefined) {
      $.ajax({
        dataType: 'json',
             url: '/model/kata_option_get',
            data: { id: getId(), name: name },
           async: false,
         success: (data) => cache[name] = data['kata_option_get']
      });
    }
    return cache[name];
  };

  const setOption = (name, value) => {
    $.post('/model/kata_option_set', {
         id: getId(),
       name: name,
      value: value
    });
    cache[name] = value;
  };

  const getId = () => {
    // I'd like this to be simpler, but can't see how
    // when review has to work for both a stand-alone page
    // (eg from a dashboard) and as a page with a [resume]
    // button (from kata/edit).
    //
    // If you are on review/show then there is no kata.id
    // So you can do the checks in either order.
    //
    // If you are on kata/edit then there is a kata.id
    // but when in review mode there is also review.id
    //
    // Options are set from kata/edit
    // Options can also be set from review/show since
    // the settings button is visible on the toolbar...
    //
    // QUESTION: Should the settings icon be hidden when in review mode?
    //    Yes. Otherwise you could change its settings.
    //    It is not visible on a review/show page from dashboard anyway!

    if (cd.kata.id) {
      return cd.kata.id();
    }
    if (cd.review.id) {
      return cd.review.id();
    }
    const errorMessage = `kata.id and review.id are both undefined!!`
    console.log(errorMessage);
    throw errorMessage;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  // UI

  const $button = $('#settings-button');

  cd.showSettingsButton = () => {
    // The setting button is off by default so that is is not
    // visible on a review page arrived at from a dashboard.
    cd.createTip($button, 'open settings dialog');
    $button.show().click(() => openSettingsDialog())
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const openSettingsDialog = () => {
    const $settings = $('#settings-dialog');
    [ 'colour', 'theme' ].forEach((name) => {
      const css = `input[type=radio][name=${name}]`;
      const cssValue = css + `[value=${cd.settings[name]()}]`;
      $(css, $settings).change(function() { cd.settings[name](this.value); });
      $(cssValue, $settings).prop('checked', true);
    });
    const xPos = $button.offset().left;
    const yPos = $button.offset().top + 90;
    $settings.dialog({
              width: 250,
           position: [ xPos, yPos ],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('settings'),
        beforeClose: () => cd.kata.editor.refocus()
    });
  };

});
</script>
