<img id="settings-button" src="/images/settings.png" />

<div id="settings-dialog" style="display:none;">
  <div class="info">
    <div class="info-title">theme</div>
    <input type="radio" id="light" name="theme" value="light">
    <label for="light">light</label><br/>
    <input type="radio" id="dark"  name="theme" value="dark">
    <label for="dark">dark</label>
  </div>
  <div class="info">
    <div class="info-title">colour syntax</div>
    <input type="radio" id="colour-on"  name="colour" value="on">
    <label for="colour-on">on</label><br/>
    <input type="radio" id="colour-off" name="colour" value="off">
    <label for="colour-off">off</label><br/>
  </div>
  <div class="info">
    <div class="info-title">test prediction</div>
    <input type="radio" id="prediction-on"  name="predict" value="on">
    <label for="prediction-on">on</label><br/>
    <input type="radio" id="prediction-off" name="predict" value="off">
    <label for="prediction-off">off</label><br/>
  </div>
</div>


<script>
'use strict';
$(() => {

  const cache = {};

  cd.settings = {
    // Note: the CodeMirror theme is a combination of colour+theme
    colour:(value) => {
      if (value === undefined) {
        return getOption('colour');
      } else {
        setOption('colour', value);
        cd.codeMirror.resetTheme();
      }
    },
    theme:(value) => {
      if (value === undefined) {
        return getOption('theme');
      } else {
        setOption('theme', value);
        cd.codeMirror.resetTheme();
        $('.tab').removeClass('light dark').addClass(value);
      }
    },
    predict:(value) => {
      if (value === undefined) {
        return getOption('predict');
      } else {
        setOption('predict', value);
        cd.predict.reset();
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const getOption = (name) => {
    if (cache[name] === undefined) {
      $.ajax({
        dataType: 'json',
             url: '/model/kata_option_get',
            data: { id:cd.kata.id(), name:name },
           async: false,
         success: (data) => cache[name] = data['kata_option_get']
      });
    }
    return cache[name];
  };

  const setOption = (name, value) => {
    $.post('/model/kata_option_set', { id:cd.kata.id(), name:name, value:value });
    cache[name] = value;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const $button = $('#settings-button');
  const $settings = $('#settings-dialog');

  cd.showSettingsButton = () => {
    // The setting button is off by default so that is is not
    // visible on a review page arrived at from a dashboard.
    $button.show().click(() => openSettingsDialog())
    cd.createTip($button, 'open settings dialog');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const setupChangeHandler = (name) => {
    const css = `input[type=radio][name=${name}]`;
    $(css, $settings).change(function() {
      cd.settings[name](this.value);
    });
  };

  const optionNames = [ 'colour', 'predict', 'theme' ];

  optionNames.forEach(name => setupChangeHandler(name));

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const openSettingsDialog = () => {
    const setProperty = (name) => {
      const css = `input[type=radio][name=${name}][value=${cd.settings[name]()}]`;
      $(css, $settings).prop('checked', true);
    };
    optionNames.forEach(name => setProperty(name));

    const xPos = $button.offset().left;
    const yPos = $button.offset().top + 90;

    $settings.dialog({
              width: 250,
           position: [xPos,yPos],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('settings'),
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            cd.kata.editor.refocus();
            return true;
          }
        }
    });
  };

});
</script>
