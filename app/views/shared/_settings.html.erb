<img id="settings-button" src="/images/settings.png" />

<div id="settings-dialog" style="display:none;">
  <div class="info">
    <div class="info-title">colour syntax</div>
    <input type="radio" id="colour-off" name="colour" value="off">
    <label for="colour-off">off</label><br/>
    <input type="radio" id="colour-on"  name="colour" value="on" >
    <label for="colour-on">on</label><br/>
  </div>
  <div class="info">
    <div class="info-title">theme</div>
    <input type="radio" id="dark"  name="theme" value="dark" >
    <label for="dark">dark</label><br/>
    <input type="radio" id="light" name="theme" value="light">
    <label for="light">light</label><br/>
  </div>
  <div class="info">
    <button id="downloadMyKata">Download my Kata</button>
  </div>
</div>

<script>
'use strict';
$(() => {

  cd.settings = {
    showButton: () => $button.show(),
    hideButton: () => $button.hide(),
    // Note: the CodeMirror theme is a combination of colour+theme
    colour:(value) => {
      const name = 'colour';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
        cd.codeMirror.resetTheme();
      }
    },
    theme:(value) => {
      const name = 'theme';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
        cd.codeMirror.resetTheme();
        cd.kata.tabs.theme(value);
      }
    },
    predict:(value) => {
      const name = 'predict';
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
      }
    },
    revert:(colour, value) => {
      const name = `revert_${colour}`;
      if (value === undefined) {
        return getOption(name);
      } else {
        setOption(name, value);
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const cache = {};

  const getOption = (name) => {
    if (cache[name] === undefined) {
      $.ajax({
            type: 'GET',
        dataType: 'json',
             url: '/saver/kata_option_get',
            data: {
                id: cd.kata.id,
              name: name
            },
           async: false,
         success: (data) => cache[name] = data['kata_option_get']
      });
    }
    return cache[name];
  };

  const setOption = (name, value) => {
    // Only available in edit mode.
    $.ajax({
          type: 'POST',
      dataType: 'json',
           url: '/saver/kata_option_set',
          data: JSON.stringify({
               id: cd.kata.id,
             name: name,
            value: value
          }),
         async: false,
       success: () => cache[name] = value
    });
  };

  const downloadMyKataElement = document.getElementById("downloadMyKata");
  downloadMyKataElement.addEventListener("click", function (e) {
    getKataFromSaver('getKataFromSaverCache');
  }, false);

  const getKataFromSaver = (name) => {
    $.ajax({
          type: 'GET',
      dataType: 'json',
            url: '/saver/kata_download',
          data: {
              id: cd.kata.id
          },
          async: false,
        success: (data) => downloadKata(data['kata_download'])
    });
  };

  const downloadKata = ([fileName, fileContentsBase64]) => {
    const blobLinkText = ''
    const blobAnchorTitle = '';
    const url = `data:application/gzip;base64,${fileContentsBase64}`;

    const blobAnchor = document.createElement('a');
    var blobLinkTextNode = document.createTextNode(blobLinkText);
    blobAnchor.appendChild(blobLinkTextNode);
    blobAnchor.title = blobAnchorTitle;
    blobAnchor.href = url;
    blobAnchor.download = fileName;
    blobAnchor.setAttribute("type", "hidden");
    blobAnchor.style.display = 'none';
    document.getElementById("settings-dialog").appendChild(blobAnchor);
    
    blobAnchor.onclick = function () {
      requestAnimationFrame(function () {
          setTimeout(() => blobAnchor.remove(), 300);
      });
    };

    blobAnchor.click();
  }

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  // UI

  const $button = $('#settings-button');

  cd.showSettingsButton = () => {
    // The setting button is off by default so that is is not
    // visible on a review page arrived at from a dashboard.
    cd.createTip($button, 'open settings dialog');
    $button.show().click(() => openSettingsDialog())
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -

  const openSettingsDialog = () => {
    const $settings = $('#settings-dialog');
    [ 'colour', 'theme' ].forEach((name) => {
      const css = `input[type=radio][name=${name}]`;
      const cssValue = css + `[value=${cd.settings[name]()}]`;
      $(css, $settings).change(function() { cd.settings[name](this.value); });
      $(cssValue, $settings).prop('checked', true);
    });
    const xPos = $button.offset().left;
    const yPos = $button.offset().top + 90;
    $settings.dialog({
              width: 250,
           position: [ xPos, yPos ],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('settings'),
        beforeClose: () => cd.kata.editor.refocus()
    });
  };

});
</script>
