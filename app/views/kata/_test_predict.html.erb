
<script type="text/javascript">
'use strict';
$(() => {

  const predicted = $('input[name=predicted]');

  cd.predict = {
    reset:() => {
      const predict = cd.settings.predict();
      if (predict === 'off') {
        cd.countPredictBox().hide();
        circleImages().hide();
      } else {
        cd.updateTrafficLightsCount();
        cd.countPredictBox().show();
        circleImages().show();
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictTrafficLight = (runTests) => {
    // Called from the test-button handler
    predicted.val('none');
    if (cd.settings.predict() === 'on') {
      openPredictionDialog(runTests);
    } else {
      runTests();
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const circleImages = () => {
    const cssSelectors = [
      '#traffic-lights img.revert',
      '#traffic-lights img.tick',
      '#traffic-lights img.cross',
    ].join(',');
    return $(cssSelectors);
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const openPredictionDialog = (runTests) => {
    const html = '<div>' + predictButtons() + autoRevertCheckbox() + '</div>';
    const $node = $(html);
    setupButtonClick(runTests, $node, 'red');
    setupButtonClick(runTests, $node, 'amber');
    setupButtonClick(runTests, $node, 'green');
    setupAutoRevertCheckBox($node);
    const originator = cd.testButton;
    const xPos = originator.offset().left;
    const yPos = originator.offset().top + 40;
    $node.dialog({
              width: 300,
           position: [xPos,yPos],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('prediction'),
              close: () => $node.dialog('destroy'),
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            return true;
          }
        }
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictButtons = () => {
    let html = '';
    html += '<table>';
    html += predictRow(predictButton('red',   'some tests will fail'));
    html += predictRow(predictButton('amber', 'tests will not run'));
    html += predictRow(predictButton('green', 'all tests will pass'));
    html += '</table>';
    return html;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictRow = (button) =>
    `<tr>
      <td>${button}</td>
    </tr>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictButton = (colour, text) =>
    `<button class="predict ${colour}">
      ${text}
     </button>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupButtonClick = (runTests, $node, colour) => {
    $(`button.predict.${colour}`, $node).click(() => {
      $node.remove();
      predicted.val(colour);
      const $oldLast = $lastTrafficLight();
      runTests(() => testRunComplete(colour, $oldLast));
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const testRunComplete = (predictedColour, $oldLast) => {
    const $newLast = $lastTrafficLight();
    const actualColour = $newLast.data('colour');
    const predictedWrong = (actualColour != predictedColour);
    const isLightToRevertTo = ($oldLast != undefined);
    if (predictedWrong && autoRevertIsOn && isLightToRevertTo) {
      const srcIndex = $oldLast.data('index');
      autoRevert({ src_id:cd.kataId(), src_index:srcIndex });
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const autoRevert = (args) => {
    // eg args = { src_id:'Xd4f2P', src_index:17 };
    args.id = cd.kataId();
    args.index = cd.getIndex();
    $.post('/kata/revert', args, (data) => {
      cd.kata.editor.deleteFiles();
      for (const filename in data.files) {
        cd.kata.editor.createFile(filename, { content:data.files[filename] });
        cd.kata.editor.showFile(filename);
      }
      cd.kata.editor.output(data.stdout.content, data.stderr.content, data.status);
      cd.kata.tabs.output().click();
      cd.kata.filenames.refresh();
      cd.appendTrafficLight(data.light);
      cd.updateTrafficLightsCount();
      cd.updateIndex(data.light.index);
      cd.scrollLastTrafficLightIntoView();
    }, 'json');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const $lastTrafficLight = () => {
    return $('#traffic-lights .diff-traffic-light').last();
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const autoRevertCheckbox = () =>
    `<div class="info">
      <input type="checkbox" id="auto-revert-checkbox"/>
      <label for="auto-revert-checkbox">
        auto-revert when wrong!
      </label>
    </div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupAutoRevertCheckBox = ($node) => {
    const $checkbox = $(`#auto-revert-checkbox`, $node);
    $checkbox
      .prop('checked', autoRevertIsOn)
      .change(() => autoRevertIsOn = $checkbox.prop('checked'));
 };

 let autoRevertIsOn = false;

});
</script>
