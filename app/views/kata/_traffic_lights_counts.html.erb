<div id="traffic-lights-count-total-box"></div>

<script>
'use strict';
$(() => {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // cd.kata.updateTrafficLightsCounts() updates the total-counts
  // It is called from these places:
  //   1) views/kata/_edit.html.erb when page loads/refreshes.
  //   2) views/kata/run_tests.js.erb when [test] is clicked.
  //   3) views/review/_review.html.erb when [checkout] is clicked.

  const $countTotalBox = $('#traffic-lights-count-total-box');

  cd.kata.updateTrafficLightsCounts = (light) => {
    counts[light.colour] += 1;
    counts.lastLight = light;
    const $box = $countTotalBox;
    $box.fadeOut('fast', () => {
      const $count = $totalCount();
      $box.empty().append($count);
      cd.setTip($count, () => cd.showHoverTip($count, trafficLightsTotalCountHoverTip()));
      $box.fadeIn('fast');
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const trafficLightsCount = (filter) => {
    let count = 0;
    if (filter === undefined) {
      filter = ['pulling','red','amber','green','timed_out','faulty'];
    }
    filter.forEach((key) => count += counts[key]);
    return count;
  };

  const counts = {
    pulling: 0,
    red:0,
    amber:0,
    green:0,
    timed_out:0,
    faulty:0,
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const $totalCount = () => {
    return $('<div>', {
      'class': `${lastLight().colour} traffic-light-count`,
    }).text(trafficLightsCount());
  };

  const trafficLightsTotalCountHoverTip = () => {
    let html = '';
    html += '<table>';
    html += lightTr('red', counts.red);
    html += lightTr('amber', counts.amber);
    html += lightTr('green', counts.green);
    if (counts.timed_out > 0) {
      html += lightTr('timed_out', counts.timed_out);
    }
    if (counts.faulty > 0) {
      html += lightTr('faulty', counts.faulty);
    }
    if (counts.pulling > 0) {
      html += lightTr('pulling', counts.pulling);
    }
    html += '</table>';
    return html;
  };

  const lightTr = (colour, count) => {
    const tr = (s) => `<tr>${s}</tr>`;
    const td = (s) => `<td>${s}</td>`;
    return '' +
      tr(td(`<img
              class="traffic-light-diff-tip-traffic-light-image"
              src="/images/traffic-light/${colour}.png">`) +
         td(`<div class='traffic-light-diff-tip-tag ${colour}'>
              ${count}
             </div>`));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const lastLight = () => counts.lastLight ? counts.lastLight : { predicted:'none' };

});
</script>
