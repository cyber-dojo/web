<div id="predict-counts" style="display:none;">
  <div id="tick-box" class="box">
    <img id="tick-img" src="/images/traffic-light/circle-tick.png">
    <div id="tick-count" class="count">0</div>
  </div>
  <div id="cross-box" class="box">
    <img id="cross-img" src="/images/traffic-light/circle-cross.png">
    <div id="cross-count" class="count">0</div>
  </div>
</div>

<script>
'use strict';
$(() => {

  const $counts = $('#predict-counts');
  cd.setTip($counts, () => cd.showHoverTip($counts, predictCountHoverTip()));

  cd.kata.predictCounts = {
    show: () => $counts.show('slide', { direction:'left' }, 500),
    hide: () => $counts.hide('slide', { direction:'left' }, 500)
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  cd.kata.updatePredictCounts = (light) => {
    $('.box', $counts).removeClass('red amber green');
    if (cd.lib.isPredict(light)) {
      const isRight = (light.colour === light.predicted);
      const name = isRight ? 'tick' : 'cross';
      $(`#${name}-count`).text(counts[name] += 1);
      $(`#${name}-box`).addClass(light.predicted);
    }
    if (light.revert) {
      counts.revert += 1;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const counts = {
    tick: 0,
    cross: 0,
    revert: 0
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const predictCountHoverTip = () => {
    return '' +
      '<table>' +
      predictTr('tick'  , 'correct'  ) +
      predictTr('cross' , 'incorrect') +
      predictTr('revert', 'reverted' ) + // ??
      // 24 predictions, with 2 reverts
      '</table>';
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const predictTr = (name, text) => {
    return '' +
      tr(td(`<div class="count-hover-tip">${counts[name]}</div>`) +
         td(`<img class="count-hover-tip"
                  src="/images/traffic-light/circle-${name}.png">`) +
         td(`<div>${text}</div>`)
      );
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const tr = (s) => `<tr>${s}</tr>`;
  const td = (s) => `<td>${s}</td>`;

});
</script>
