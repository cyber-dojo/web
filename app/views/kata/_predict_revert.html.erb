<input name="predicted"       type="hidden" value="none">
<input name="revert_if_wrong" type="hidden" value="off">

<div id="predict-checkbox-cell">
  <div id="predict-checkbox-title">predict</div>
  <input type="checkbox" id="predict-checkbox"/>
</div>

<div id="revert-title-cell" style="display:none;">
  <div id="revert-title">auto-revert if wrong!</div>
</div>

<div id="predict-buttons-cell" style="display:none;">
  <table>
    <tr>
      <td><button class="predict red" data-colour="red" type="button">red</button></td>
      <td><div class="revert-checkbox-cell">
            <input type="checkbox" class="revert-checkbox" data-colour="red"  />
          </div>
      </td>
    </tr>
    <tr>
      <td><button class="predict amber" data-colour="amber" type="button">amber</button></td>
      <td><div class="revert-checkbox-cell">
          <input type="checkbox" class="revert-checkbox" data-colour="amber"/>
        </div>
      </td>
    </tr>
    <tr>
      <td><button class="predict green" data-colour="green" type="button">green</button></td>
      <td><div class="revert-checkbox-cell">
          <input type="checkbox" class="revert-checkbox" data-colour="green"/>
        </div>
      </td>
    </tr>
  </table>
</div>

<script>
'use strict';
$(() => {

  //- - - - - - - - - - - - - - - - - - - - - - -
  // Predict checkbox

  const kata = cd.kata;
  const settings = cd.settings;

  const $predictCheckboxCell = $('#predict-checkbox-cell');
  const $predict = $('#predict-checkbox');

  const colourTr = (colour, meaning) => {
    return [
      '<tr>',
        `<td><div style="text-align:right;" class="${colour}">${colour}</div></td>`,
        `<td>&nbsp;${meaning}</td>`,
      '</tr>'
    ].join('');
  };

  cd.createTip($predictCheckboxCell, [
    '<table>',
      colourTr(  'red', 'some tests will fail'),
      colourTr('amber', 'tests will not run'  ),
      colourTr('green', 'all tests will pass' ),
    '</table>'
    ].join(''));

  $('#predict-checkbox-title').click(() => {
    $predict.prop('checked', !$predict.is(':checked'));
    predictCheckBoxChanged();
  });

  $predict.prop('checked', settings.predict() === 'on')
          .click(() => predictCheckBoxChanged());

  const predictCheckBoxChanged = () => {
    if ($predict.prop('checked')) {
      predictOn();
    } else {
      predictOff();
    }
  };

  const predictOn = () => {
    settings.predict('on');
    kata.testButton.hide(() => {
      $revertTitle.show('slow');
      $buttonsCell.slideDown('slow');
      kata.showPredictImages();
      kata.showPredictCounts();
      setFilenameListMaxHeight(470);
      kata.editor.refocus();
    });
  };

  const predictOff = () => {
    settings.predict('off');
    $revertTitle.hide('slow');
    $buttonsCell.slideUp('slow', () => {
      kata.testButton.show();
      kata.hidePredictImages();
      kata.hidePredictCounts();
      setFilenameListMaxHeight(530);
      kata.editor.refocus();
    });
  };

  const setFilenameListMaxHeight = (value) => {
    $('#kata-page #filename-list').css('max-height', value);
  };

  //- - - - - - - - - - - - - - - - - - - - - - -
  // Predict buttons

  const $predicted = $('input[name=predicted]');
  const $revertIfWrong = $('input[name=revert_if_wrong]');

  kata.predictedColour = () => $predicted.val();
  kata.noPrediction = () => $predicted.val('none');

  const $buttonsCell = $('#predict-buttons-cell');
  const $buttons = $('button.predict');

  $('button.predict').click((event) => {
    $buttons.prop('disabled', true );
    const rag = $(event.target).data('colour');
    $predicted.val(rag);
    $revertIfWrong.val(settings.revert(rag));
    kata.runTests(() => $buttons.prop('disabled', false));
  });

  //- - - - - - - - - - - - - - - - - - - - - - -
  // Revert title and checkboxes

  const $revertTitle = $('#revert-title-cell');

  cd.createTip($revertTitle, [
    'creates an <em>extra</em> traffic-light',
    'reverting all your files!'
    ].join('<br/>'));

  $('.revert-checkbox').click((event) => {
    const $box = $(event.target);
    const colour = $box.data('colour');
    if ($box.is(':checked')) {
      settings.revert(colour, 'on');
    } else {
      settings.revert(colour, 'off');
    }
    kata.editor.refocus();
  });

  cd.kata.setupPrediction = () => {
    ['red','amber','green'].forEach((colour) => {
      const $box = $(`.revert-checkbox[data-colour=${colour}]`);
      $box.prop('checked', settings.revert(colour) === 'on');
    });
    if (settings.predict() === 'on') {
      predictOn();
    } else {
      predictOff();
    }
  };

});
</script>
